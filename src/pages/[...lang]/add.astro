---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Error from "@/components/Error.astro";
import Input from "@/components/Input.astro";
import { getStaticLanguagePaths, getLangFromUrl } from "@/utils/i18n.ts";
import { data } from "@/i18n/add.ts";
import { defaultLang, translator } from "@/utils/i18n.ts";

export const getStaticPaths = getStaticLanguagePaths;

const lang = getLangFromUrl(Astro.url);
const t = translator(data, lang);
---

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script is:inline lang="javascript">
  const rerender = async () => {
    let render = document.getElementById("md-render");
    let input = document.getElementById("md-input");
    // console.log(input.value);
    render.innerHTML = marked.parse(input.value);
    validate();
  };

  const updateFileName = () => {
    let title = document.getElementById("title");
    let filename = document.getElementById("filename");
    filename.value = title.value
      .toLowerCase()
      .replaceAll(/[ _]/g, "-")
      .replaceAll(/[^\w\s\-]/g, "");
  };
  // const toggleAdvanced = async () => {
  //   let value = document.getElementById("toggle-advanced").checked;
  //   // console.log(value);
  //   for (let element of document.getElementsByClassName("advanced")) {
  //     element.style = `display: ${value ? "initial" : "none"}`;
  //   }
  // };
</script>
<script is:inline define:vars={{translations: Object.assign({}, data[defaultLang], data[lang])}} lang="javascript">
 const validate = () => {
    let submitButton = document.getElementById("submit");
    let errorContainer = document.getElementById("error-div");
    let errorText = document.getElementById("error-message");
    let error = findInputError();

    if (error === undefined) {
      submitButton.disabled = false;
      errorContainer.dataset.active = false;
      return
    };
    submitButton.disabled = true;
    errorContainer.dataset.active = true;
    errorText.innerText = translations['errors.boilerplate(details)'].replaceAll("{details}", error);
  };
  const findInputError = () => {
    let form = document.getElementById("form");
    for (const input of form.elements) {
      if (input.required && input.value === "") return translations["errors.empty(fieldname)"].replaceAll("{fieldname}", input.name);
    };

    let text = document.getElementById("md-input").value;
    if (text === "") return translations['errors.textEmpty'];
    const banned_words = [
      [/(<br ?\/?>)/, translations['errors.htmlBr']],
      [/<\/p>/, translations['errors.htmlP']],
      [/<\/(i|em)>/, translations['errors.htmlI']],
      [/<\/(b|strong)>/, translations['errors.htmlB']],
      [/<a href="?([^">]+)"?>/, translations['errors.htmlI']],
    ];
    for (const [word, error] of banned_words) {
      let match = text.match(word);
      if (match === null) continue;
      return error.replaceAll("$1", match[1]);
    };
  };
  
  const submit = async () => {
    let form = document.getElementById("form");
    let data = {
      "submitted-by": document.getElementById("submitted-by").value,
      filename: document.getElementById("filename").value,
      title: document.getElementById("title").value,
      description: document.getElementById("description").value,
      authors: document.getElementById("authors").value,
      date: document.getElementById("date").value,
      "date-precision": document.getElementById("date-precision").value,
      "original-title": document.getElementById("original-title").value,
      "original-authors": document.getElementById("original-authors").value,
      tags: document.getElementById("tags").value,
      license: document.getElementById("license").value,
      sources: document.getElementById("sources").value,
      notes: document.getElementById("notes").value,
      text: document.getElementById("md-input").value,
    };
    console.log(data);

    let submitButton = document.getElementById("submit");
    submitButton.value = translations['submit.clicked'];
    submitButton.onclick = "";
    let response = await fetch("https://submit-4gx.pages.dev/api/submit", {
      method: "POST",
      body: JSON.stringify(data),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
    let responseBody = await response.json();

    if (responseBody.success) {
      document.getElementById("response").innerHTML = translations['submit.success(url, title)'].replaceAll("{url}", responseBody.data.html_url).replaceAll("{title}", responseBody.data.title);
      document.getElementById("response-error").innerHTML = "";
    } else {
      document.getElementById("error-message").innerHTML = translations['submit.error(details)'].replaceAll("{details}", JSON.stringify(responseBody.error, null, " "))
      document.getElementById("error-div").dataset.active = true;
      submitButton.active = false;
    }
    submitButton.value = translations['submit.button'];
    submitButton.onclick = submit;
  };

  const ignoreError = () => {
    let submitButton = document.getElementById("submit");
    let errorContainer = document.getElementById("error-div");
    errorContainer.dataset.active = false;
    submitButton.disabled = false;
  };

  window.validate = validate
  window.submit = submit
  window.ignoreError = ignoreError

  // document.getElementById("form").addEventListener("submit", (e) => {
  //   e.preventDefault();

  //   console.log(e);

  // const formData = new FormData(e.target);
  // const data = Array.from(formData.entries()).reduce((memo, [key, value]) => ({
  //   ...memo,
  //   [key]: value,
  // }), {});
  // document.getElementById('output').innerHTML = JSON.stringify(data);
  // });
</script>

<BaseLayout title={t("addpage.title")}>
  <section>
    <h1>{t('addpage.header')}</h1>
    <form id="form" oninput="validate()">
      <div class="row">
        <Input
          top
          id="submitted-by"
          title={t('add.submitted-by.title')}
          required
          placeholder={t('add.submitted-by.default')}
        />
      </div>
      <div class="row">
        <Input
          id="filename"
          title={t('add.filename.title')}
          placeholder={t('add.filename.default')}
          required
        />
      </div>
      <div class="row">
        <Input
          id="title"
          title={t('add.title.title')}
          placeholder={t('add.title.default')}
          required
          oninput="updateFileName()"
        />
        <Input
          id="original-title"
          title={t('add.original-title.title')}
          placeholder={t('add.original-title.default')}
        />
      </div>
      <div class="row">
        <Input
          id="authors"
          title={t('add.authors.title')}
          placeholder={t('add.authors.default')}
        />
        <Input
          id="original-authors"
          title={t('add.original-authors.title')}
          placeholder={t('add.original-authors.default')}
        />
      </div>
      <div class="row">
        <Input
          id="description"
          title={t('add.description.title')}
          placeholder={t('add.description.default')}
        />
      </div>
      <div class="row">
        <Input id="date" title={t('add.date.title')} type="date" required />
        <Input id="date-precision" title={t('add.date-precision.title')} tag="select" required>
          <option selected value="day">{t('add.date-precision.day')}</option>
          <option value="month">{t('add.date-precision.month')}</option>
          <option value="year">{t('add.date-precision.year')}</option>
          <option value="none">{t('add.date-precision.none')}</option>
        </Input>
      </div>
      <div class="row">
        <Input id="tags" title={t('add.tags.title')} placeholder={t('add.tags.default')} />
        <Input id="license" title={t('add.license.title')} placeholder={t('add.license.default')} />
      </div>
      <div class="row">
        <Input
          id="sources"
          title={t('add.sources.title')}
          placeholder={t('add.sources.default')}
          required
        />
      </div>
      <div class="row">
        <Input bottom id="notes" title={t('add.notes.title')} />
      </div>
    </form>
    <!-- <input id="toggle-advanced" type="checkbox" oninput="toggleAdvanced()" />
      <label for="toggle-advanced">Show advanced options</label>
      <div class="advanced">
        <span>Proofreaders</span>
        <input id="proofreaders" />
      </div>
      <div class="advanced">
        <span>Archives</span>
        <input id="archives" />
      </div>
      <div class="advanced">
        <span>Preprocessing</span>
        <input id="preprocessing" />
      </div>
      <div class="advanced">
        <span>Accessibility notes</span>
        <input id="accessibility-notes" />
      </div> -->
  </section>
  <div>
    <h1>{t('add.text.title')}</h1>
    <textarea
      id="md-input"
      placeholder={t('add.text.default')}
      oninput="rerender()"></textarea>
  </div>
  <div id="md-render"></div>
  <Error id="error-div" active={false}><span id="error-message"></span>
    <br><button class="ignore_error" onclick="ignoreError()">{t('errors.ignore')}</button>
  </Error>
  <input
    class="submit"
    type="submit"
    id="submit"
    value={t('submit.button')}
    onclick="submit()"
  />
  <div id="response"></div>
  <pre id="response-error"></pre>
</BaseLayout>

<style>
  .row {
    display: flex;
  }
  .submit, .ignore_error {
    font-size: inherit;
    font-family: inherit;
    color: inherit;
    background-color: inherit;
    display: block;
    border: 1px solid var(--grey-1);
    padding: var(--block-padding);
    font-weight: bold;
    border-radius: var(--block-border-radius);
    margin: 10px auto;
  }
  .ignore_error {
    font-style: italic;
    padding: var(--block-padding);
  }
  .submit:hover, .ignore_error:hover {
    background-color: var(--bg-1);
  }
  .submit:disabled {
    background-color: var(--grey-1);
    cursor: not-allowed;
  }
  textarea {
    box-sizing: border-box;
    padding: var(--block-padding);
    width: 100%;
    height: 200px;
    background-color: initial;
    color: inherit;
    border: 0;
    outline: 1px solid var(--grey-1);
    border-radius: var(--block-border-radius);
    font-size: 16px;
  }
  textarea:focus {
    border: 0;
    outline: 2px solid var(--accent);
  }
</style>
