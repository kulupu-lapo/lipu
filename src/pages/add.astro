---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Error from "@/components/Error.astro";
import Input from "@/components/Input.astro";
---

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script lang="javascript">
  const rerender = async () => {
    let render = document.getElementById("md-render");
    let input = document.getElementById("md-input");
    // console.log(input.value);
    render.innerHTML = marked.parse(input.value);
    validate();
  };

  const updateFileName = () => {
    let title = document.getElementById("title");
    let filename = document.getElementById("filename");
    filename.value = title.value
      .toLowerCase()
      .replaceAll(/[ _]/g, "-")
      .replaceAll(/[^\w\s\-]/g, "");
  };
  // const toggleAdvanced = async () => {
  //   let value = document.getElementById("toggle-advanced").checked;
  //   // console.log(value);
  //   for (let element of document.getElementsByClassName("advanced")) {
  //     element.style = `display: ${value ? "initial" : "none"}`;
  //   }
  // };
</script>
<script lang="javascript">
 const validate = () => {
    let submitButton = document.getElementById("submit");
    let errorContainer = document.getElementById("error-div");
    let errorText = document.getElementById("error-message");
    let error = findInputError();

    if (error === undefined) {
      submitButton.disabled = false;
      errorContainer.dataset.active = false;
      return
    };
    submitButton.disabled = true;
    errorContainer.dataset.active = true;
    errorText.innerText = "Error: "+error;
  };
  const findInputError = () => {
    let form = document.getElementById("form");
    for (const input of form.elements) {
      if (input.required && input.value === "") return `"${input.name}" field must be provided`;
    };

    let text = document.getElementById("md-input").value;
    if (text === "") return `Text must not be empty`;
    const banned_words = [
      [/(<br ?\/?>)/, "Text should use markdown not HTML, \n\"toki$1toki\"\ncan be written as \n\"toki\\\ntoki\"\nor\n\"toki  \ntoki\"\n(with two spaces)"],
      [/<\/p>/, "Text should use markdown not HTML, \n\"<p>toki open</p><p>toki pini</p>\"\ncan be written as \n\"toki open\ntoki pini\"\n"],
      [/<\/(i|em)>/, "Text should use markdown not HTML, \"<$1>toki</$1>\" can be written as \"*toki*\""],
      [/<\/(b|strong)>/, "Text should use markdown not HTML, \"<$1>toki</$1>\" can be written as \"**toki**\""],
      [/<a href="?([^">]+)"?>/, "Text should use markdown not HTML, \"<a href=\"$1\">lipu</a>\" can be written as \"[lipu]($1)\""],
    ];
    for (const [word, error] of banned_words) {
      let match = text.match(word);
      if (match === null) continue;
      return error.replaceAll("$1", match[1]);
    };
  };
  
  const submit = async () => {
    let form = document.getElementById("form");
    let data = {
      "submitted-by": document.getElementById("submitted-by").value,
      filename: document.getElementById("filename").value,
      title: document.getElementById("title").value,
      description: document.getElementById("description").value,
      authors: document.getElementById("authors").value,
      date: document.getElementById("date").value,
      "date-precision": document.getElementById("date-precision").value,
      "original-title": document.getElementById("original-title").value,
      "original-authors": document.getElementById("original-authors").value,
      tags: document.getElementById("tags").value,
      license: document.getElementById("license").value,
      sources: document.getElementById("sources").value,
      notes: document.getElementById("notes").value,
      text: document.getElementById("md-input").value,
    };
    console.log(data);

    let submitButton = document.getElementById("submit");
    submitButton.value = "Submitting, please wait...";
    submitButton.onclick = "";
    let response = await fetch("https://submit-4gx.pages.dev/api/submit", {
      method: "POST",
      body: JSON.stringify(data),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
    let responseBody = await response.json();

    if (responseBody.success) {
      document.getElementById("response").innerHTML =
        `Your article has been received and will be reviewed by volunteers!<br /><a href="${responseBody.data.html_url}">${responseBody.data.title}</a><br />Please make sure not to submit the same thing several times, thanks in advance!`;
      document.getElementById("response-error").innerHTML = "";
    } else {
      document.getElementById("error-message").innerHTML = 
        `Failed to upload article. Show this to kala Asi at ma pona! Error message:
        <pre>\n${JSON.stringify(responseBody.error, null, " ")}</pre>`
      document.getElementById("error-div").dataset.active = true;
      submitButton.active = false;
    }
    submitButton.value = "Submit article";
    submitButton.onclick = submit;
  };

  const ignoreError = () => {
    let submitButton = document.getElementById("submit");
    let errorContainer = document.getElementById("error-div");
    errorContainer.dataset.active = false;
    submitButton.disabled = false;
  };

  // document.getElementById("form").addEventListener("submit", (e) => {
  //   e.preventDefault();

  //   console.log(e);

  // const formData = new FormData(e.target);
  // const data = Array.from(formData.entries()).reduce((memo, [key, value]) => ({
  //   ...memo,
  //   [key]: value,
  // }), {});
  // document.getElementById('output').innerHTML = JSON.stringify(data);
  // });
</script>

<BaseLayout title={"Add an article"}>
  <section>
    <h1>Add your article</h1>
    <form id="form" oninput="validate()">
      <div class="row">
        <Input
          top
          title="Submitted by"
          id="submitted-by"
          required
          placeholder="your Toki Pona name"
        />
      </div>
      <div class="row">
        <Input
          title="File name"
          id="filename"
          required
          placeholder="carry-feat-jan-kekan-san"
        />
      </div>
      <div class="row">
        <Input
          title="Title"
          id="title"
          required
          placeholder="carry-feat-jan-kekan-san"
          oninput="updateFileName()"
          placeholder="carry (feat.) jan kekan san"
        />
        <Input
          title="Original title"
          id="original-title"
          placeholder="carry-feat-jan-kekan-san"
          placeholder="(use this if the work is a translation)"
        />
      </div>
      <div class="row">
        <Input
          title="Authors"
          id="authors"
          placeholder="jan Usawi, jan Kekan San"
        />
        <Input
          title="Original authors"
          id="original-authors"
          placeholder="(use this if the work is a translation)"
        />
      </div>
      <div class="row">
        <Input
          title="Description"
          id="description"
          placeholder="A punny parody of Wayward Son"
        />
      </div>
      <div class="row">
        <Input title="Date published" id="date" type="date" required />
        <Input title="Date precision" id="date-precision" tag="select" required>
          <option selected value="day">Precise to the day</option>
          <option value="month">Precise to the month</option>
          <option value="year">Precise to the year</option>
          <option value="none">Complete guess</option>
        </Input>
      </div>
      <div class="row">
        <Input title="Tags" id="tags" placeholder="music, pop, parody" />
        <Input title="License" id="license" placeholder="CC BY-SA 3.0" />
      </div>
      <div class="row">
        <Input
          title="Sources"
          id="sources"
          required
          placeholder="https://janusawi.bandcamp.com/album/toki-gaming"
        />
      </div>
      <div class="row">
        <Input bottom title="Notes" id="notes" />
      </div>
    </form>
    <!-- <input id="toggle-advanced" type="checkbox" oninput="toggleAdvanced()" />
      <label for="toggle-advanced">Show advanced options</label>
      <div class="advanced">
        <span>Proofreaders</span>
        <input id="proofreaders" />
      </div>
      <div class="advanced">
        <span>Archives</span>
        <input id="archives" />
      </div>
      <div class="advanced">
        <span>Preprocessing</span>
        <input id="preprocessing" />
      </div>
      <div class="advanced">
        <span>Accessibility notes</span>
        <input id="accessibility-notes" />
      </div> -->
  </section>
  <div>
    <h1>Text</h1>
    <textarea
      id="md-input"
      placeholder="# Start typing! o kama sitelen e ijo!\n\nYou can use **Markdown**! o nasin **Markdown**!"
      oninput="rerender()"></textarea>
  </div>
  <div id="md-render"></div>
  <Error id="error-div" active={false}><span id="error-message"></span>
    <br><button class="ignore_error" onclick="ignoreError()">I know what I'm doing, ignore this</button>
  </Error>
  <input
    class="submit"
    type="submit"
    id="submit"
    value="Submit article"
    onclick="submit()"
  />
  <div id="response"></div>
  <pre id="response-error"></pre>
</BaseLayout>

<style>
  .row {
    display: flex;
  }
  .submit, .ignore_error {
    font-size: inherit;
    font-family: inherit;
    color: inherit;
    background-color: var(--bg);
    border: 1px solid var(--grey-1);
    border-radius: 10px;
  }
  .submit {
    font-weight: bold;
    padding: 10px 40px;
    display: block;
    margin: 10px auto;
  }
  .ignore_error {
    font-style: italic;
    padding: 0.5em 1em;
  }
  .submit:hover, .ignore_error:hover {
    background-color: var(--bg-1);
  }
  .submit:disabled {
    background-color: var(--grey-1);
    cursor: not-allowed;
  }
  textarea {
    box-sizing: border-box;
    padding: 10px;
    width: 100%;
    height: 200px;
    background-color: initial;
    color: inherit;
    border: 0;
    outline: 1px solid var(--grey-1);
    border-radius: 15px;
    font-size: 16px;
  }
  textarea:focus {
    border: 0;
    outline: 2px solid var(--accent);
  }
</style>
