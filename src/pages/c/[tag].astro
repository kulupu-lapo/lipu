---
import BaseHead from "@/components/BaseHead.astro";
import Footer from "@/components/Footer.astro";
import FoundPost from "@/components/FoundPost.astro";
import Header from "@/components/Header.astro";
import { getCollection } from "astro:content";
import { glob } from "glob";
import { readFileSync } from "node:fs";
import { parse as parseYaml } from "yaml";
import { z } from "zod";

export async function getStaticPaths() {
  const Collection = z
    .object({
      name: z.string(),
      sources: z.array(z.string()).nonempty().optional(),
      // not optional; can be empty for upcoming collections
      items: z.array(z.string()).nullable(),
    })
    .strict();

  type CollectionT = z.infer<typeof Collection>;

  const collections: CollectionT[] = (
    await glob("poki/collections/**/*.yaml")
  ).map((filepath: string) =>
    Collection.parse(parseYaml(readFileSync(filepath, "utf8"))),
  );

  const posts = (await getCollection("blog")).sort(
    (a, b) => b.data.date.valueOf() - a.data.date.valueOf(),
  );

  console.log(posts.map((post) => post.filePath));

  const uniqueTags = [
    ...new Set(posts.map((post) => post.data.tags).flat()),
  ].filter((tag) => tag);

  return collections.map((collection) => {
    const filteredPosts = posts.filter(
      (post) =>
        post.filePath &&
        collection.items &&
        collection.items.map((item) => `poki/${item}`).includes(post.filePath),
    );
    return {
      params: { tag: collection.name },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params!;
const { posts } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={tag} description={""} />
    <style>
      ul {
        list-style-type: none;
        padding: 0;
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <h2>Posts tagged with {tag} ({posts.length})</h2>
      <ul>
        {posts.map((post) => <FoundPost {...post} />)}
      </ul>
    </main>
    <Footer />
  </body>
</html>
