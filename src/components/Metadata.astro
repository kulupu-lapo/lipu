---
import type { CollectionEntry } from "astro:content"
import MixIn from "@/components/MixIn.astro";;
import { escape } from "@/utils/content";
import { translator, getLangFromUrl, urlLocaliser } from "@/utils/i18n"
import { data } from "@/i18n/ui";
import { locales } from "@/utils/i18n";

interface Props {
  post: CollectionEntry<"poki">["data"];
}
const { post } = Astro.props;

const localUrl = urlLocaliser(Astro.url)
const t = translator(data, getLangFromUrl(Astro.url))
---

<style>
  p {
    margin: initial;
  }
  details {
    background-color: var(--bg-1);
    padding: var(--block-padding);
    border-radius: var(--block-border-radius);
    margin: 10px auto;
  }
</style>

<details open>
  <summary>{t('metadata.container_title')}</summary>
  <p>
    <MixIn template={t('metadata.github[link]')}>
      <a slot="link" href={`https://github.com/kulupu-lapo/poki/blob/main/plaintext/${Astro.url.pathname
          .split("/")
          .filter((x) => x)
          .filter((x,i) => !(i===0 && (locales as string[]).includes(x)))
          .join("/")}.md?plain=1`}
          >
          {t('metadata.github.link')}
      </a>
    </MixIn>
  </p>
  {post.description && <p>
    {t('metadata.description(text)', {text: post.description})}
  </p>}
  {post.proofreaders && <p>
    {t('metadata.proofreaders(proofreaders)', {proofreaders: post.proofreaders})}
  </p>}
  {post.tags && <p>
    <MixIn template={t('metadata.tags[links]')}>
      {post.tags.map((tag) => (<a slot="links" href={localUrl(`/t/${escape(tag)}`)}>{tag}</a>))}
    </MixIn>
  </p>}
  {post.license && <p>
    {t('metadata.license(text)', {text: post.license})}
  </p>}
  {post.sources && <p>
    <MixIn template={t('metadata.sources[links]')}>
      {post.sources.map((source, i) => (
        <a slot="links" href={source}>{source.split("/")[2] ?? i + 1}</a>
      ))}
    </MixIn>
  </p>}
  {post.archives && <p>
    <MixIn template={t('metadata.archives[links]')}>
      {post.archives.map((archive, i) => (
        <a slot="links" href={archive}>{archive.split("/")[2] ?? i + 1}</a>
      ))}
    </MixIn>
  </p>}
  {
    post.original && post.original.title !== null &&  (
      <p>
        <MixIn template={t('metadata.original[title, credits]')}>
          <a slot="title" href={localUrl(`/o/${escape(post.original.title)}`)}>{post.original.title}</a>
          {post.original.authors && (
            <span slot="credits">{t('metadata.original.credits(authors)', {authors: post.original.authors})}</span>
          )}
        </MixIn>
      </p>
    ) 
  }
  {
    (post.preprocessing || post["accessibility-notes"] || post.notes) && (
      <p>
        <MixIn template={t('metadata.notes[notes]')}>
          {post.preprocessing && <span slot="notes">{post.preprocessing}</span>}
          {post["accessibility-notes"] && <span slot="notes">{post["accessibility-notes"]}</span>}
          {post.notes && <span slot="notes">{post.notes}</span>}
        </MixIn>
      </p>
    )
  }
</details>
