---
import { type CollectionEntry } from "astro:content";
import { unescape } from "@/utils/content";

interface Props {
  prevnexts: {
    [v: string]: {
      prev?: CollectionEntry<"blog">;
      next?: CollectionEntry<"blog">;
    };
  };
  langPrefix: string;
}

const humanReadable = (string: string) => {
  if (string === "/") return "Index";
  if (string.slice(0, 2) === "a/") return `by ${unescape(string.slice(2))}`;
  if (string.slice(0, 2) === "c/") return `from ${unescape(string.slice(2))}`;
  if (string.slice(0, 2) === "t/") return `${unescape(string.slice(2))}`;
  if (string.slice(0, 2) === "o/") return `adapting ${unescape(string.slice(2))}`;
  return string;
};

const { prevnexts, langPrefix } = Astro.props;
---

<style>
  div {
    width: 100%;
    padding: 0px;
    display: grid;
    grid-template-columns: repeat(3, minmax(0, 1fr));
    text-align: center;
  }
  div * {
    min-height: 60px;
  }
  a {
    width: 100%;
    height: 100%;
    align-content: center;
    /* padding: 15px 0px; */
  }
  hr {
    margin: 0;
    color: var(--accent);
  }
  a:first-child {
    text-align: left;
  }
  a:last-child {
    text-align: right;
  }
  nav {
  }
  select {
    background-color: inherit;
    border: 0px solid var(--grey);
    padding: 10px 0;
    text-align: center;
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    cursor: pointer;

    white-space: normal;
    /* For Firefox: */
    text-overflow: ellipsis;
  }
  select:hover {
    background-color: var(--bg-1);
  }
</style>

<script>
  const prevnexts = JSON.parse(
    document.getElementById("prevnext-json")!.innerText,
  );

  const getQuery = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const queryParam = urlParams.get("q");
    return queryParam ?? "/";
  };

  const setQuery = (value: string) => {
    const urlParams = new URLSearchParams();
    urlParams.append("q", value);
    const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
    window.history.replaceState({}, "", newUrl);
  };

  const navSelect = document.getElementById("nav-select")! as HTMLSelectElement;
  navSelect.addEventListener("change", async () => {
    setQuery(navSelect.value);
    updatePage();
  });

  const abbreviate = (string: string | undefined) =>
    string
      ? string.length < 20
        ? string
        : `${string.slice(0, 20)}...`
      : undefined;

  const updatePage = () => {
    const prevnext = prevnexts[getQuery()];
    navSelect.value = getQuery();
    const lang = navSelect.dataset.langprefix || '.';

    const prev = document.getElementById("nav-prev-link")!;
    if (prevnext.prev) {
      prev.setAttribute("href", `${lang}/${prevnext.prev?.id}?q=${getQuery()}`);
      prev.innerText = `« ${abbreviate(prevnext.prev?.data.title)}`;
    } else {
      prev.innerText = "";
    }

    const next = document.getElementById("nav-next-link")!;
    if (prevnext.next) {
      next.setAttribute("href", `${lang}/${prevnext.next?.id}?q=${getQuery()}`);
      next.innerText = `${abbreviate(prevnext.next?.data.title)} »`;
    } else {
      next.innerText = "";
    }
  };

  // console.log(prevnexts);
  // console.log(getQuery());

  updatePage();
</script>

<nav>
  <span id="prevnext-json" style="display: none;"
    >{JSON.stringify(prevnexts)}</span
  >
  <hr />
  <div>
    <a id="nav-prev-link"></a>
    <select id="nav-select" data-langprefix={langPrefix} value="/">
      {
        Object.entries(prevnexts).map(([name, pn]) => (
          <option value={name}>{humanReadable(name)}</option>
        ))
      }
    </select>
    <a id="nav-next-link"></a>
  </div>
  <hr />
</nav>
